{
  "articles": [
    {
      "path": "about.html",
      "title": "BitStat 패키지",
      "description": "**BitStat**는 **R 패키지**로, 통계 기반의 데이터 분석을 UI/UX로 지원하는 **shiny 웹앱**\n",
      "author": [],
      "contents": "\n\nContents\n기능적 특징\n다국어 지원 (i18n)\n데이터 분석 보고서 지원\n도움말 및 튜토리얼 지원\n\n구조적 특징\nR & shiny\nServer Hosting & Local Hosting\ndlookr & alookr\n\n\n기능적 특징\n다국어 지원 (i18n)\nBitStat은 메뉴와 메시지 등 UI 레벨에서 한글과 영문을 지원합니다.\n\n\n\n한글 지원 BitStat영문 지원 BitStat데이터 분석 보고서 지원\nBitStat은 PDF와 HTML 포맷의 각종 보고서 작성을 지원합니다.\nPDF 포맷 보고서\nPDF 포맷 보고서는 정적 컨텐츠를 제공하며, 데이터 분석 프로젝트의 산출물로 활용이 가능합니다.\n \nHTML 포맷 보고서\nhtml 포맷 보고서는 동적 컨텐츠를 제공하며, 독립적으로 심층적인 데이터 분석의 수행이 가능합니다.\n \n도움말 및 튜토리얼 지원\nrmarkdown 기반의 도움말과 튜토리얼은 사용자가 데이터 분석을 쉽게 수행할 수 있도록 가이드를 제공합니다.\n구조적 특징\nR & shiny\nR 패키지로 개발되며, shiny 웹앱으로 UI/UX를 구현하였습니다.\nR 패키지\nR 패키지로 배포가 가능합니다.\nshiny\nshiny 웹앱을 구성합니다. 현재는 프로토타이핑 버전으로 Look & Feal은 shinydashboard로 구현되었습니다.\nServer Hosting & Local Hosting\nServer\nBitStat는 데이터 분석 Server로서 클라우드 환경에 배포되어 데이터 분석을 지원합니다.\nDesktop\nBitStat는 사용자 컴퓨터에서 구동되어 데이터 분석 수행을 지원합니다.\ndlookr & alookr\nBitStat는 dlookr, alookr 패키지의 기능을 최적화 하여 지원합니다.\ndlookr\ndlookr 패키지는 데이터 진단, 탐색적 데이터 분석, 통계적 데이터 변환 기능을 UI/UX 기반과 보고서 기반으로 최적화 및 자동화 합니다.\n\n\n\nalookr\nalookr 패키지는 분석 데이터 분할, 이진 분류 모델 적합 및 모델 검증을 자동화하는 AutoML 기능을 지원합니다.\n현재 alookr 패키지는 기능의 만들어지는 과정이기 때문에, BitStat 패키지와 병행해서 기능이 진보될 것입니다.\n\n\n\n\n\n\n",
      "last_modified": "2021-10-08T21:00:02+09:00"
    },
    {
      "path": "bitstat.html",
      "title": "BitStat 개발하기",
      "description": "Shiny 앱 개발 관점에서, 협업을 위한 BitStat 앱의 특징을 이해한다.\n",
      "author": [],
      "contents": "\n\nContents\nBitStat 현황\n개발 버전\n프로토타이핑\n\nBitStat 구조\n소스 디렉토리 구조\n\ni18n (Internationalization)\ni18n을 위한 위젯 정보 파일\ntranslation.csv\n변환을 위한 R 코드\nBitStat 실행하기\n\n도움말\nVignettes\n도움말 메뉴\n\n\nBitStat 현황\n개발 버전\n핸재 BitStat는 개발 버전으로 0.5.0.9001 버전 번호를 달고 있습니다. 개발 버전인 관계로 CRAN에 등록되어 있지 않고, github(https://github.com/bit2r/BitStat)에만 등록되어 있습니다.\n프로토타이핑\n현재는 프로토타이핑 개발 버전입니다. 그런데 제품(Product) 개발 버전으로 프로젝트가 변경될 경우에는 UI/UX의 골격이 바뀔 수도 있습니다. 현재는 기능적인 프로토타이핑 중으로 UI/UX는 shinydashboard를 채용하고 있습니다.\nBitStat 구조\nBitStat는 Shiny 앱이면서 R 패키지입니다.\n소스 디렉토리 구조\ninst\napp\nwww\nimg\n이미지 보관 디렉토리\n\nmeta\nlist_datasets.rds\nBitStat 데이터셋 R 데이터 파일\n\nlable_info.xlsx\ntranslation.csv 파일을 작성하기 위한 상세 정보\n\n\ndocs\n도움말 파일 위치 (현재 미생성)\n\n\nmenu\ndata_ui.R\n데이터 관련 메뉴의 UI 기능 구현\n\n기능명_ui.R\n기능이 추가될 때마다 생성\n\n\ntools\ndata.R\n데이터 관련 메뉴의 Server side 기능 구현\n\n기능명.R\n기능이 추가될 때마다 생성\n\n\nglobal.R\nserver.R\nui.R\n\ntranslation\ntranslation.csv\ni18n을 위한 메뉴/메시지 메타파일\n\n\n\nR\n패키지 소스 파일로 앱과 연관관계가 적은 공통 기능 구현\n\ni18n (Internationalization)\ni18n을 구현하는 방법을 살펴보자.\ni18n을 위한 위젯 정보 파일\ni18n을 위한 위젯 정보 파일인 lable_info.xlsx은 위젯들에 대한 정보를 담고 있는 엑셀 파일로 다음과 같은 컬럼을 가지고 있습니다.\n1차 기능\n기능분류의 1단계\n\n2차 기능\n기능분류의 2단계\n\n3차 기능\n기능분류의 3단계\n\n4차 기능\n기능분류의 4단계\n\n라벨_한글\n한글 라벨\n\n라벨_영어\n영문 라벨\n\n위젯 종류\n위젯의 종류\n\n위젯 아이디\n프로그램에서의 위젯 아이디\n\n인/아웃\n입/출력 여부\n\n설명\n위젯에 대한 설명\n\nlable_info.xlsx\n\n\n\n협업 포인트\n\n1. 일정 분량의 소스 코드가 개발되면, 문서에 정리한다.\n\n2. 한글 라벨에 대응하는 영문 라벨을 번역한다.\n\n3. 기 작성 라벨의 오탈자, 오역을 수정한다.\n\n\ntranslation.csv\ni18n을 위한 메뉴/메시지 메타파일인 translation.csv은 lable_info.xlsx 파일의 “라벨_한글”, “영문 라벨” 컬럼을 복사하여 만듭니다.\ntranslation.csv변환을 위한 R 코드\ntranslate() 함수에 translation.csv에 정의된 한글 메뉴/메시지를 입력하면 됩니다.\n\n\nlibrary(BitStat)\nassign(\"language\", \"en\", envir = .BitStatEnv)\n\ntranslate(\"범주 레벨 순서변경:\")\n\n\n[1] \"Reorder levels:\"\n\ntranslate(\"범주 레벨 변경/병합은 범주형 데이터만 지원합니다. 원한다면 먼저 범주형 데이터로 변경 후 진행하세요.\")\n\n\n[1] \"Reorganize levels only support factors. If you want, cast it to factor first.\"\n\nBitStat 실행하기\n한글 메뉴 실행하기\n한글 메뉴가 기본이기 때문에 launch() 함수만 호출하면 됩니다.\n\n\nlibrary(BitStat)\n\nlaunch()\n\n\n\n영어 메뉴 실행하기\n영어 메뉴는 language 인수값에 “en”을 지정하여 launch() 함수를 호출하면 됩니다.\n\n\nlibrary(BitStat)\n\nlaunch(language = \"en\")\n\n\n\n도움말\nBitStat 활용도를 높이기 위해서 도움말을 제공할 계획입니다.\nVignettes\nBitStat의 소개를 중심으로 도움말을 작성합니다.\n도움말 메뉴\n기능별로 상세하게 도움말을 작성합니다.\nrmarkdown을 이용해서 도움말을 작성합니다.\n사례 중심의 도움말을 작성합니다.\n사례 발굴이 필요합니다.\n데이터, 분석 시나리오 등\n\n\n\n\n\n\n협업 포인트\n\n1. 기 개발 범위 내에서 도움말 메뉴를 작성한다.\n\n2. 향후 개발 범위에 대해서 내장 데이터 기반의 도움말 시나리오를 만든다.\n\n3. Vignettes을 작성한다.\n\n\n\n\n\n",
      "last_modified": "2021-10-08T21:00:06+09:00"
    },
    {
      "path": "control-widget.html",
      "title": "위젯 추가하기",
      "description": "위젯을 이해한다. **입력 위젯**을 패널에 추가하는 방법을 숙지하자.\n",
      "author": [],
      "contents": "\n\nContents\n위젯을 아시나요?\n입력 위젯\n\n위젯을 추가한 예제\ntutorial\n입력 위젯 완성하기 tutorial\nShiny 공식 tutorial 페이지\n추가 예제 실행해 보기\n\n\n위젯을 아시나요?\n“위젯(widget)은 컴퓨터 프로그래밍에서 위젯(widget) 또는 컨트롤(control)은 컴퓨터 사용자가 상호 작용하는 인터페이스 요소입니다.” - https://ko.wikipedia.org/wiki/GUI_위젯 중에서\n입력 위젯\nShiny에서는 입력 위젯을 컨트롯 위젯(control widgets)이라 부릅니다. 즉, 위젯을 통해서 앱을 컨트롤하기 때문입니다. 굳이 입력 위젯이라고 불렀던 것은 입력된 값을 통해서 기능이 컨트롤되고, 중요한 대부분 컨트롤 위젯 이름의 접미사가 “Input”이기 때문입니다.\nshiny 패키지의 입력 위젯은 버튼을 포함해서 다음과 같은 종류가 있습니다.\n\n\nlibrary(shiny)\n\nsetdiff(union(ls(pos = \"package:shiny\", pattern = \"Input$\"), \n      ls(pos = \"package:shiny\", pattern = \"Button$\")),\n      ls(pos = \"package:shiny\", pattern = \"^update\"))\n\n\n [1] \"checkboxGroupInput\"      \"checkboxInput\"          \n [3] \"dateInput\"               \"dateRangeInput\"         \n [5] \"fileInput\"               \"numericInput\"           \n [7] \"passwordInput\"           \"restoreInput\"           \n [9] \"selectInput\"             \"selectizeInput\"         \n[11] \"sliderInput\"             \"snapshotPreprocessInput\"\n[13] \"textAreaInput\"           \"textInput\"              \n[15] \"varSelectInput\"          \"varSelectizeInput\"      \n[17] \"actionButton\"            \"bookmarkButton\"         \n[19] \"downloadButton\"          \"modalButton\"            \n[21] \"submitButton\"           \n\n기본 입력 위젯은 다음 그림과 같습니다.\n기본 입력 위젯위젯을 추가한 예제\n다음 예제는 레이아웃과 패널에 입력 위젯을 출력한 예제입니다.\n\n\nui <- fluidPage(\n  titlePanel(\"censusVis\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      helpText(\"Create demographic maps with \n               information from the 2010 US Census.\"),\n      \n      selectInput(\"var\", \n                  label = \"Choose a variable to display\",\n                  choices = list(\"Percent White\", \n                                 \"Percent Black\",\n                                 \"Percent Hispanic\", \n                                 \"Percent Asian\"),\n                  selected = \"Percent White\"),\n      \n      sliderInput(\"range\", \n                  label = \"Range of interest:\",\n                  min = 0, max = 100, value = c(0, 100))\n    ),\n    \n    mainPanel()\n  )\n)\n\n\n\n위의 예제의 결과는 다음과 같습니다.\n입력 위젯들그리고 위 그림에서 selectInput은 이름처럼 여러 값 중에서 하나의 값을 선택하는 입력 위젯입니다. 다음처럼 마우스를 올려 놓으면 네 개의 값이 출력되고, 사용자는 하나의 값을 선택하면 됩니다.\nselectInput 위젯tutorial\n입력 위젯 완성하기 tutorial\n다음 코드를 입력한 후, app.R이라는 이름의 파일로 저장하고 실행해 보세요. 완성된 입력 위젯의 기능을 확인할 수 있습니다. 여러분은 UI 파트를 완성하였습니다.\n\n\nlibrary(shiny)\n\n# Define UI ----\nui <- fluidPage(\n  titlePanel(\"censusVis\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      helpText(\"Create demographic maps with \n               information from the 2010 US Census.\"),\n      \n      selectInput(\"var\", \n                  label = \"Choose a variable to display\",\n                  choices = list(\"Percent White\", \n                                 \"Percent Black\",\n                                 \"Percent Hispanic\", \n                                 \"Percent Asian\"),\n                  selected = \"Percent White\"),\n      \n      sliderInput(\"range\", \n                  label = \"Range of interest:\",\n                  min = 0, max = 100, value = c(0, 100))\n    ),\n    \n    mainPanel()\n  )\n)\n\n# Define server logic ----\nserver <- function(input, output) {\n  \n}\n\n# Run the app ----\nshinyApp(ui = ui, server = server)\n\n\n\nShiny 공식 tutorial 페이지\nShiny 공식 tutorial 페이지를 살펴보고, 입력 위젯의 종류와 설정하는 방법을 이해하세요.\nhttps://shiny.rstudio.com/tutorial/written-tutorial/lesson3/\n추가 예제 실행해 보기\n예제를 실행시켜 보고, 다양한 입력 위젯과 출력 위젯을 경험해 보세요.\n\n\nshiny::runExample(\"07_widgets\")\n\n\n\n\n\n\n",
      "last_modified": "2021-10-08T21:00:07+09:00"
    },
    {
      "path": "index.html",
      "title": "BitStat",
      "description": "오픈 통계 패키지인 **BitStat**는 디지털 시대에 필수 역량이 되어 버린 **Data Literacy 역량 강화**를 위한 목적으로 개발되며, 공유 문화 기반으로 개인과 기업의 **디지털 전환에 기여**코자 합니다. \n",
      "author": [],
      "contents": "\nBitStat 웹앱\nBitStat는 R/Shiny로 구현되고 있는 웹앱(Web Application)입니다.\n\nBitStat 패키지\nBitStat는 BitStat라는 이름의 R 패키지로 배포됩니다. 현재는 개발 버전입니다.\n\n\nBitStat 소스 리파지토리\nGithub : https://github.com/bit2r/BitStat\n\n\n\n",
      "last_modified": "2021-10-08T21:00:08+09:00"
    },
    {
      "path": "introduce_shiny.html",
      "title": "Shiny 아키텍처 이해",
      "description": "Shiny 아키텍처를 이해한다. **UI**, **server**, **입력 위젯(input widget)**, **출력 위젯(output widget)**, **렌더링(Rendering)** 정도는 숙지하자.\n",
      "author": [],
      "contents": "\n\nContents\nShiny 아키텍처\nUI와 Server의 상호작용\nUI와 server의 상호작용 예시\nUI와 server의 상호작용 표준화\n\nShiny 첫 예제\n히스토그램 그리기 예제\n예제 실행해 보기\n\ntutorial\nShiny 공식 tutorial 페이지\n\n\n\n\n들어가기\n본 핸즈온(튜토리얼)은\n컨트리뷰션 아카데미 멘티들의 OJT를 염두로\n작성되었습니다. 초심자 대상이기 때문에, Shiny의 ABC만   \n     다룹니다. 그 이상의 학습을 원하는 분들은\nResouces\n페이지를 참고하십시요.\n\n학습 내용은\nShiny in seven lessons\n(\nhttps://shiny.rstudio.com/tutorial/\n) 을 참조하여 작성하였습니다.\n\n\nShiny 아키텍처\nUI와 Server의 상호작용\nUI와 Server의 상호작용UI : 사용자 인터페이스(User Interface) 영역으로 입력 위젯(input widget)을 통해 사용자가 의도하는 파라미터(인수)를 server에 전달합니다.\nserver : 입력 위젯의 변화를 감지하여, 미리 정의된 작업을 수행한 후 그 결과를 출력 위젯(output widget)에 렌더링하여(rendering) 사용자에게 전달합니다.\nUI와 server의 상호작용 예시\nUI와 Server의 상호작용 예시sliderInput 위젯은 사용자 입력을 기다리고,\n입력 위젯(input widget)은 사용자의 입력을 대기\n\n입력을 인지한 후, sliderInput 위젯과 연결된 renderPlot() 함수를 호출\n위젯이 변경되면 변경된 위젯이 포함된 렌더링 함수가 자동 호출됩니다.\n\nrenderPlot() 함수는 sliderInput 위젯 값만큼의 막대가 포함된 히스토그램을 그리고,\n렌더링 함수가 실행됩니다.\n\n히스토그램은 출력 위젯(Output widget)인 plotOutput에 렌더링(그려짐)됩니다.\n출력 위젯에 렌더링된 결과가 반영됩니다.\n\nUI와 server의 상호작용 표준화\nUI와 server의 상호작용을 shiny 스크립트 관점에서 표준화해 봅니다.\n위젯들은 개별 위젯을 인식하도록 아이디를 부여해야 합니다.\n입력 위젯은 inputId,\n출력 위젯은 outputId\n\n입력 위젯의 이름은 “기능명 + Input” 포맷으로 정의됩니다.\nsliderInput = slider + Input,\n즉, 슬라이더로 사용자 입력을 받아서 서버로 전달하는 위젯\n\n출력 위젯의 이름은 “기능명 + Output” 포맷으로 정의됩니다.\nplotOutput = plot + Output,\n즉, 시각화된 R 플롯을 출력하는 위젯\n\n렌더링 함수 이름은 “render + 기능명” 포맷으로 정의됩니다.\nrenderPlot = render + Plot,\n즉, 플롯으로 렌더링하는(플롯을 그리는) 함수\n\nShiny 첫 예제\n히스토그램 그리기 예제\nUI와 Server의 상호작용 예시를 구현한 shiny 프로그램은 다음과 같습니다.\n눈으로 한번 쭉 훑어보세요. 이해할 것 같으면서도 어려운 겁니다.\n\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n\n    output$distPlot <- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    <- faithful[, 2]\n        bins <- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white')\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n예제 실행해 보기\n아키텍처를 이해하려는 목적으로 결과를 보고 프로그램도 살펴 보세요.\n\n\nshiny::runExample(\"01_hello\")\n\n\n\ntutorial\nShiny 공식 tutorial 페이지\nShiny 공식 tutorial 페이지를 살펴보고, 앱을 실행시키는 방법을 숙지하세요.\nhttps://shiny.rstudio.com/tutorial/written-tutorial/lesson1/\n\n\n\n",
      "last_modified": "2021-10-08T21:00:08+09:00"
    },
    {
      "path": "kodlookr.html",
      "title": "kodlookr 개발하기",
      "description": "kodlookr 패키지를 개발하는 방법을 소개한다.\n",
      "author": [],
      "contents": "\nkodlookr\nkodlookr은 한국인이 dlookr 패키지를 쉽게 사용할 수 있도록, 도움말 자료를 한글화한 패키지입니다.\nkodlookr 패키지 개발 방법 소개\nkodlookr 개발하기\nkodlookr 리파지토리\nGithub : https://github.com/bit2r/kodlookr\n\n\n\n",
      "last_modified": "2021-10-08T21:00:09+09:00"
    },
    {
      "path": "reactivity.html",
      "title": "반응 출력",
      "description": "반응 출력을 이해한다. **랜더링 함수**의 종류와 기능도 숙지하자.\n",
      "author": [],
      "contents": "\n\nContents\n반응형 출력을 아시나요?\n출력 위젯\n렌더링 함수\n\ntutorial\n반응 출력 완성하기 tutorial\ntutorial 페이지\n추가 예제 실행해 보기\n\n\n반응형 출력을 아시나요?\n“반응형 출력(reactive output)은 사용자가 입력 위젯의 값을 변경하면, 이에 반응, 응답하여 출력을 자동으로 만들어주는 것을 의미합니다.” 일반적인 웹 어플리케이션은 사용자가 입력 위젯의 값을 변경한 후, “확인”, “실행” 등의 버튼을 누를 때 출력이 발생하지만, Shiny는 기본적으로 반응형 출력으로 결과를 반환합니다.\n출력 위젯\n출력 위젯의 이름의 접미사는 “Output”로 계산된 결과나 시각화 결과를 사용자에게 보여주는 기능을 수행합니다.\nshiny 패키지의 출력 위젯은 같습니다.\n\n\nlibrary(shiny)\n\nls(pos = \"package:shiny\", pattern = \"Output$\")\n\n\n[1] \"dataTableOutput\"          \"htmlOutput\"              \n[3] \"imageOutput\"              \"plotOutput\"              \n[5] \"snapshotPreprocessOutput\" \"tableOutput\"             \n[7] \"textOutput\"               \"uiOutput\"                \n[9] \"verbatimTextOutput\"      \n\nUI에 출력 위젯 추가하기\n“selected_var”라는 아이디로 출력 위젯 textOutput을 UI에 추가합니다.\n\n\nui <- fluidPage(\n  titlePanel(\"censusVis\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      helpText(\"Create demographic maps with \n               information from the 2010 US Census.\"),\n      \n      selectInput(\"var\", \n                  label = \"Choose a variable to display\",\n                  choices = c(\"Percent White\", \n                              \"Percent Black\",\n                              \"Percent Hispanic\", \n                              \"Percent Asian\"),\n                  selected = \"Percent White\"),\n      \n      sliderInput(\"range\", \n                  label = \"Range of interest:\",\n                  min = 0, max = 100, value = c(0, 100))\n    ),\n    \n    mainPanel(\n      textOutput(\"selected_var\")\n    )\n  )\n)\n\n\n\n렌더링 함수\n렌더링 함수 이름의 접두사는 “render”로 입력 위젯의 값이 변경되면 반응하여 계산 결과를 출력 위젯에 랜더링합니다.\nshiny 패키지의 렌더링 함수는 다음과 같습니다.\n\n\nls(pos = \"package:shiny\", pattern = \"^render\")\n\n\n[1] \"renderCachedPlot\" \"renderDataTable\"  \"renderImage\"     \n[4] \"renderPlot\"       \"renderPrint\"      \"renderTable\"     \n[7] \"renderText\"       \"renderUI\"        \n\n렌더링 함수\n생성 객체\n내용\nrenderDataTable\nDataTable\n데이터 테이블\nrenderImage\n이미지\n이미지 파일 등\nrenderPlot\n플롯\n플롯 결과\nrenderPrint\n텍스트 출력\n모든 출력\nrenderTable\n테이블 구조 객체\ndata frame, matrix 등\nrenderText\n텍스트 출력\n텍스트 출력\nrenderUI\n사용저 정의 UI\n기존 위젯으로 사용자가 정의한 위젯\n렌더링 함수로 결과 반환하기\n다음 예제는 렌더링 함수인 renderText로 아이디가 “selected_var”인 출력 위젯에 “You have selected this”라는 텍스트를 렌더링(출력)합니다. 그러나 이것은 반응 출력이 아닙니다.\n\n\nserver <- function(input, output) {\n  output$selected_var <- renderText({ \n    \"You have selected this\"\n  })\n}\n\n\n\n다음 예제는 렌더링 함수인 renderText로 아이디가 “selected_var”인 출력 위젯에 “You have selected this”라는 텍스트와 아이디가 “var”인 입력 위젯의 값을 붙여서 렌더링(출력)합니다.\n이것은 반응 출력이 입니다. 렌더링 함수에 포함된 입력 위젯인 “var”의 값이 변경될 때마다 renderText 함수가 반응하여 계산된 결과를 출력 위젯인 “selected_var”에 렌더링합니다.\ninput$var는 아이디가 “var”인 입력 위젯을 의미하고, output$selected_var는 아이디가 “selected_var”인 출력 위젯을 의미합니다.\n\n\nserver <- function(input, output) {\n  output$selected_var <- renderText({ \n    paste(\"You have selected\", input$var)\n  })\n}\n\n\n\ntutorial\n반응 출력 완성하기 tutorial\n다음 코드를 입력한 후, app.R이라는 이름의 파일로 저장하고 실행해 보세요. 완성된 반응 출력의 기능을 확인할 수 있습니다. 여러분은 server 파트를 완성하였습니다.\n\n\nlibrary(shiny)\n\nui <- fluidPage(\n  titlePanel(\"censusVis\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      helpText(\"Create demographic maps with \n               information from the 2010 US Census.\"),\n      \n      selectInput(\"var\", \n                  label = \"Choose a variable to display\",\n                  choices = c(\"Percent White\", \n                              \"Percent Black\",\n                              \"Percent Hispanic\", \n                              \"Percent Asian\"),\n                  selected = \"Percent White\"),\n      \n      sliderInput(\"range\", \n                  label = \"Range of interest:\",\n                  min = 0, max = 100, value = c(0, 100))\n    ),\n    \n    mainPanel(\n      textOutput(\"selected_var\"),\n      textOutput(\"min_max\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  \n  output$selected_var <- renderText({ \n    paste(\"You have selected\", input$var)\n  })\n  \n  output$min_max <- renderText({ \n    paste(\"You have chosen a range that goes from\",\n          input$range[1], \"to\", input$range[2])\n  })\n  \n}\n\nshinyApp(ui, server)\n\n\n\ntutorial 페이지\nShiny 공식 tutorial 페이지를 살펴보고, 반응 출력을 이해하세요.\nhttps://shiny.rstudio.com/tutorial/written-tutorial/lesson4/\n추가 예제 실행해 보기\n예제를 실행시켜 보고, 또다른 반응 출력을 경험해 보세요.\n\n\nshiny::runExample(\"03_reactivity\")\n\n\n\n\n\n\n",
      "last_modified": "2021-10-08T21:00:10+09:00"
    },
    {
      "path": "shiny_resources.html",
      "title": "학습 리소스",
      "description": "**BitStat** 개발 참여를 위한 Shiny, HTML, CSS 등에 대한 학습 리소스  \n",
      "author": [],
      "contents": "\n\nContents\nShiny 학습과 개발을 위한 리소스\nShiny 학습을 위한 리소스\n초보자를 위한 웹 개발 학습 리소스\nShiny 개발을 위한 리소스\n\nBitStat 패키지 개발을 위한 리소스\nBitStat 개발을 위한 리소스\n\n\nShiny 학습과 개발을 위한 리소스\nShiny 학습을 위한 리소스\nShiny 홈페이지 :\nhttps://shiny.rstudio.com/\n초급자 필수 사이트\n\nhtmltools 패키지 홈페이지 :\nhttps://rstudio.github.io/htmltools/\nshiny 앱에 html tags를 포함하는 기능\n\nshinydashboard 홈페이지 :\nhttps://rstudio.github.io/shinydashboard/\n초급자 필수 사이트\n\nMastering Shiny :\nhttps://mastering-shiny.org/\n중급자 이상\n\nBootstrap :\nhttps://getbootstrap.com/\n부트스트랩은 웹사이트를 쉽게 만들 수 있게 도와주는 HTML, CSS, JavaScript 프레임워크\nShiny는 내부적으로 Bootstrap와 인터페이스하여 반응형 앱을 구현하는 개발 도구\n\n초보자를 위한 웹 개발 학습 리소스\nHTML 홈페이지 :\nhttp://tcpschool.com/html/intro\nHTML(HyperText Markup Language)은 웹페이지에 내용을 기술하고 정의하는 데 사용\n\nCSS 홈페이지 :\nhttp://tcpschool.com/css/intro\nCSS(Cascading Style Sheets)는 웹페이지 콘텐츠의 모양이나 표현을 기술하는 데 사용\n\nJavaScript 홈페이지 :\nhttp://tcpschool.com/javascript/intro\nCSS(Cascading Style Sheets)는 웹페이지 콘텐츠 개발에 사용되는 스크립트 프로그래밍 언어\n\nShiny 개발을 위한 리소스\nFont Awesome :\nhttps://fontawesome.com/\n앱에 사용할 아이콘 선택을 위한 정보\n\nBitStat 패키지 개발을 위한 리소스\nBitStat 개발을 위한 리소스\ndlookr :\nhttps://choonghyunryu.github.io/dlookr/\n데이터 진단, 데이터 변환, 기술통계 기능 구현에 사용되는 R 패키지\n\nalookr :\nhttps://choonghyunryu.github.io/alookr/\n샘플링, 이진분류 모델링에 사용할 R 패키지\n\n\n\n\n",
      "last_modified": "2021-10-08T21:00:10+09:00"
    },
    {
      "path": "todo.html",
      "title": "진행 경과 및 계획",
      "description": "진행된 내역과 앞으로의(단기) 계획\n",
      "author": [],
      "contents": "\n\nContents\n진행 경과\n단기 계획\n협업 방법\n컨트리뷰션 아카데미\n기타 대외 협력\n\n\n진행 경과\nBitStat는 2021년 9월부터 개발되 시작한 통계적 데이터 분석 툴의 프로토타이핑입니다.\n현재는 데이터 입력/진단을 마무리하고, 데이터 변환 기능을 구현하고 있는 단계입니다.\n\n진행 경과 표\n대분류\n중분류\n소분류\n상세 기능\n데이터\n데이터 준비\n데이터 업로드\nCSV 파일\n엑셀 파일\nR 데이터 파일\n\n데이터\n데이터 준비\n데이터 관리\n데이터셋 정보 편집\n데이터셋 삭제\n데이터셋 다운로드\n전체 다운로드\n\n데이터\n데이터 진단\n진단 개요\n데이터 진단 개요\n데이터 진단 상세\n\n데이터\n데이터 진단\n변수별 진단\n개별 변수별 데이터 진단\n\n데이터\n데이터 진단\n이상치\n이상치 진단 분석\n\n데이터\n데이터 진단\n보고서 작성\npdf 보고서 작성\nweb 보고서 작성\n\n데이터\n데이터 변환\n변수 조작\n변수 이름 변경\n변수 형 변환\n변수 삭제\n변수 레벨 순서변경\n변수 레벨 변경/병합\n변수 변환\n변수 비닝\n\n\n단기 계획\n2021년 하반기까지는 기술통계와 단순선형모형을 구현할 계획입니다.\n\n진행 계획 표\n대분류\n중분류\n소분류\n상세 기능\n데이터\n데이터 변환\n데이터 정제\n결측치 제거/대체\n이상치 제거/대체\n중복 관측치 제거\n\n데이터\n데이터 변환\n데이터 분할\nRandom Simple Sampling\nBootstrap Sampling\nHoldout Sampling\n\n기술통계\nEDA\n단변량\n통계량\n시각화\n\n기술통계\nEDA\n이변량\n통계량\n시각화\n\n기술통계\nEDA\n다변량\n통계량\n시각화\n\n회귀분석\n단순선형모형\n모델 적합\n변수선택\n모델 적합\n\n회귀분석\n단순선형모형\n모델 진단\n모델 진단\n\n회귀분석\n단순선형모형\n예측\n예측\n\n\n협업 방법\n컨트리뷰션 아카데미\n컨트리뷰션 아카데미에서 멘티들이 BitStat의 일부를 구현합니다.\n멘티들이 기여할 수 있는 작업들\nkodlookr 패키지 구현\nkodlookr 패키지는 dlookr 패키지의 한글 도움말 패키지로,\ndlookr 패키지의 함수 도움말과 Vignettes(소품) 한글화\n\nkodlookr 패키지는 BitStat의 도움말 리소스로 활용\n데이터 진단, 탐색적 데이터 분석, 데이터 변환 작업\n\n\nBitStat 메뉴/메시지의 영문화 작업 수행\ni18n 구현을 위한 한글 메시지의 영문 번역\n\nBitStat 도움말을 작성\n기 구현 영역과 10/11월 중 구현한 기능 범위\n1차로 한글 도움말에 한정하여 작성\n\n개발 산출물 정리 및 표준화\n명명규칙에 맞게 변수 목록 표준화\n산출물의 오탈자 수정\n\nBitStat에 구현할 기능 중 심플하고 난이도 낮은 기능 개발\nshiny 앱 개발 및 아키텍쳐 이해를 위한 경험 제공을 위한 활동으로\n개인의 역량을 고려하여 배분 및 진행\n\n기타 대외 협력\n현 단계에서는 고려하고 있지 않음\n\n\n\n",
      "last_modified": "2021-10-08T21:00:11+09:00"
    },
    {
      "path": "userinterface.html",
      "title": "사용자 인터페이스 만들기",
      "description": "사용자 인터페이스(UI)를 이해한다. **page**, **layout**, **panel**을 숙지하자.\n",
      "author": [],
      "contents": "\n\nContents\nShiny 사용자 인터페이스\nShiny 앱 Skeleton\n페이지\n레이아웃과 패널\nHTML 태그\n\ntutorial\nUI 뼈대 만들기 tutorial\nShiny 공식 tutorial 페이지\n추가 예제 실행해 보기\n\n\nShiny 사용자 인터페이스\nShiny 앱 Skeleton\n\n\nlibrary(shiny)\n\n# Define UI ----\nui <- fluidPage(\n  \n)\n\n# Define server logic ----\nserver <- function(input, output) {\n  \n}\n\n# Run the app ----\nshinyApp(ui = ui, server = server)\n\n\n\n페이지\nShiny 앱의 UI는 하나의 Page로 구성됩니다. 즉, 페이지(page)에 여러 개의 위젯을 배치하여 앱을 구성합니다. 이 Skeleton에서는 fluidPage를 사용하였군요.\n\n페이지는 화가가 그림을 그릴 캔버스라고 이해하면 쉽습니다. 화가가 캔버스에 여러 가지 과일과 꽃 등을 배치하여 정물화를 그리거나, 나무, 산, 강 등을 적절하게 배치하여 풍경화를 그리는 것처럼 Shiny는 페이지에 위젯을 적절하게 배치하여 앱을 개발하는 것입니다.\n\nshiny 페이지\n다음 이미지는 앞에서 실행해 보았던 예제에서 fluidPage로 정의한 UI입니다.\nfluidPage로 정의한 UI그리고 shiny 패키지는 다음과 같은 몇 개의 페이지 함수를 포함하고 있습니다.\n\n\nlibrary(magrittr)\nlibrary(shiny)\n\nls(pos = \"package:shiny\", pattern = \"Page$\") %>% \n  setdiff(\n    ls(pos = \"package:shiny\", pattern = \"^update\")\n  )\n\n\n[1] \"basicPage\"     \"bootstrapPage\" \"fillPage\"      \"fixedPage\"    \n[5] \"fluidPage\"     \"navbarPage\"   \n\n\n유화를 그리는 화가는 캔버스를 준비하지만, 산수화를 그리는 화가는 화선지를 준비하고, 초등학교 미술시간에는 크레파스와 켄트지를 준비하겠지요. 용도에 따라 몇 개의 페이지를 준비해 놓은 것입니다.\n\nshinydashboard 페이지\n다음은 shiny로 대시보드를 구현할 때 사용하는 shinydashboard 패키지의 dashboardPage로 정의한 UI입니다.\ndashboardPageshinydashboard 패키지는 dashboardPage라는 단 하나의 페이지만 제공합니다.\n\n\nlibrary(shinydashboard)\n\nls(pos = \"package:shinydashboard\", pattern = \"Page$\")\n\n\n[1] \"dashboardPage\"\n\n현재 BitStat는 shinydashboard 패키지를 확장한 shinydashboardPlus 패키지의 dashboardPage로 페이지를 구성하고 있습니다.\n레이아웃과 패널\n페이지에 위젯을 보기 좋게 배치하기 위해서 Shiny는 레이아웃(layout)과 패널(panel)을 제공합니다. 레이아웃은 페이지를 가상으로 구획하는 구도이며, 패널은 위젯을 그룹핑하여 패치할 공간을 의미합니다.\n\n화가는 캔버스를 가상으로 나누는 구도를 잡고 사물을 그리는 것처럼 Shiny는 레이아웃으로 구도를 잡고, 패널을 적당하게 배치한 후 패널 안에 비로소 위젯을 채워나갑니다. 즉, 레이아웃과 패널을 적당히 섞어서 앱의 모양(UI)을 정의합니다.\n\n레이아웃\nshiny 패키지는 몇 개의 레이아웃을 제공하는데 앞의 예제처럼 sidebarLayout이 일반적으로 사용됩니다.\n\n\nls(pos = \"package:shiny\", pattern = \"Layout$\") \n\n\n[1] \"flowLayout\"     \"sidebarLayout\"  \"splitLayout\"   \n[4] \"verticalLayout\"\n\n패널\nshiny 패키지는 몇 개의 패널을 제공하는데 앞의 예제에서는 titlePanel, sidebarPanel, mainPanel이 사용되었습니다.\n\n\nls(pos = \"package:shiny\", pattern = \"Panel$\") %>% \n  setdiff(\n    ls(pos = \"package:shiny\", pattern = \"^update\")\n  )\n\n\n [1] \"absolutePanel\"    \"conditionalPanel\" \"fixedPanel\"      \n [4] \"headerPanel\"      \"inputPanel\"       \"mainPanel\"       \n [7] \"navlistPanel\"     \"sidebarPanel\"     \"tabPanel\"        \n[10] \"tabsetPanel\"      \"titlePanel\"       \"wellPanel\"       \n\n레이아웃과 패널의 배치 예제\n다음 예제는 히스토그램을 그리는 예제에서의 레이아웃과 패널의 배치 방법입니다. 위젯을 포함하지 않은 상태입니다.\n\n\nui <- fluidPage(\n  titlePanel(\"title panel\"),\n\n  sidebarLayout(\n    sidebarPanel(\"sidebar panel\"),\n    mainPanel(\"main panel\")\n  )\n)\n\n\n\n위와 같은 배치는 다음 그림과 같은 사이드 바 구도를 만들어 줍니다.\n사이드바 레이아웃sidebarLayout은 일반적으로 sidebarPanel와 mainPanel을 포함합니다. 이것은 왼쪽에 사이드 바 패널을 만들어서 사용자의 입력을 받는 위젯을 배치하고 오른쪽에는 사용자의 입력에 따른 결과를 출력할 메인 패널을 배치하는 방법으로 동작합니다.\ntitlePanel은 이름처럼 앱의 타이틀을 출력할 패널입니다.\nHTML 태그\n아시다시피 Shiny 앱을 HTML로 동작하는 웹 어플리케이션을 의미합니다. 즉, Shiny가 만들어 주는 것은 웹 어플리케이션을 구성하는 HTML, CSS, Javascript입니다.\nR의 htmltools 패키지는 HTML 태그를 만들어 주는 패키지입니다. shiny 패키지가 htmltools 패키지를 이용해서 HTML 태그를 만들어 줍니다.\nHTML 태그를 만드는 함수\nh1() 함수는 첫번째 레벨의 해더를 생성하는 MTML의 <h1> 태그를 만들어 줍니다. 글쓰기에서 장(Chapter)의 타이틀을 만들 때 사용하는 태그입니다. 헤더(Headers)를 만들어 준다고 이해하면 쉽겠지요. 이니셜을 따서 h, 첫번 째라서 1가 됩니다. 합치면 h1가 되겠지요. 숫자가 클수록 글자의 크기가 작아집니다.\nh1() 함수는 다음처럼 <h1> 태그를 만들어 줍니다.\n\nh1(\"A first level header\")\n[1] <h1>A first level header<\/h1>\n\n 그런데, 이 HTML 태그는 웹 브라우저에서 다음과 같이 출력됩니다.\n\nA first level header\n\nshiny 패키지에서 제공하는 대표적인 HTML 태그 함수는 다음과 같습니다.\n함수\nHTML 태그\n의미\np\n<p>\n파라그래프 텍스트\nh1\n<h1>\n첫번째 헤더\nh2\n<h2>\n두번째 헤더\nh3\n<h3>\n세번째 헤더\nh4\n<h4>\n네번째 헤더\nh5\n<h5>\n다섯번째 헤더\nh6\n<h6>\n여섯번째 헤더\nbr\n<br>\n줄 바꿈\nhr\n<hr>\n수평선 긋기\nimg\n<img>\n이미지 삽입\nstrong\n<strong>\n볼드체\ndiv\n<div>\n동일 스타일의 문자 디비젼\nspan\n<span>\n동일 스타일의 문자 인라인\nHTML 태그를 사용 예제\n다음 예제는 여러 종류의 헤더를 출력하는 UI의 설계입니다. 입력 위젯은 포함하지 않은 상태입니다.\n\n\nui <- fluidPage(\n  titlePanel(\"My Shiny App\"),\n  sidebarLayout(\n    sidebarPanel(),\n    mainPanel(\n      h1(\"First level title\"),\n      h2(\"Second level title\"),\n      h3(\"Third level title\"),\n      h4(\"Fourth level title\"),\n      h5(\"Fifth level title\"),\n      h6(\"Sixth level title\")\n    )\n  )\n)\n\n\n\n위와 같은 배치는 다음 그림과 같은 사이드 바 구도를 만들어 줍니다.\n사이드바 레이아웃tutorial\ntutorial에서는 UI 뼈대를 만들기 위해서 fluidPage, sidebarLayout, mainPanel, tabsetPanel을 사용합니다.\nUI 뼈대 만들기 tutorial\n다음 코드를 입력한 후, app.R이라는 이름의 파일로 저장하고 실행해 보세요. 앞에서 다룬 사이드바 레이아웃 그림과 같은 앱이 출력됩니다.\n\n\nlibrary(shiny)\n\n# Define UI ----\nui <- fluidPage(\n  titlePanel(\"title panel\"),\n  \n  sidebarLayout(position = \"right\",\n                sidebarPanel(\"sidebar panel\"),\n                mainPanel(\"main panel\")\n  )\n)\n\n# Define server logic ----\nserver <- function(input, output) {\n  \n}\n\n# Run the app ----\nshinyApp(ui = ui, server = server)\n\n\n\nShiny 공식 tutorial 페이지\nShiny 공식 tutorial 페이지를 살펴보고, 사용자 인터페이스를 구축하는 방법을 이해하세요.\nhttps://shiny.rstudio.com/tutorial/written-tutorial/lesson2/\n추가 예제 실행해 보기\n예제를 실행시켜 보고, tabsetPanel의 기능을 이해하세요. tabsetPanel은 탭 기능으로 여러 출력 위젯을 선택적으로 한 화면에 표현해 줍니다.\n\n\nshiny::runExample(\"06_tabsets\")\n\n\n\n\n\n\n",
      "last_modified": "2021-10-08T21:00:12+09:00"
    }
  ],
  "collections": []
}
